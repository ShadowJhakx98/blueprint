blueprint:
  name: Voice Assistant - Advanced Memory Management Platform
  description: >
    "
    # Advanced Voice Assistant Memory Management Platform

    This enterprise-grade blueprint creates a sophisticated memory system for your voice assistant
    with multi-user support, advanced memory processing, and extensive integrations. Built on 
    snarky-snark's var component, it delivers a complete solution for remembering information, 
    forgetting details, categorizing memories, and maintaining memory integrity with intelligence features.

    When a voice command is issued (for example, "Remember that I prefer tea over coffee" or
    "Forget that I like sugar in my coffee"), your LLM will process the request and update
    the memory accordingly. The system maintains memory categories, handles conflicts,
    performs verification, and notifies you of the results.

    ### Features:
    * Memory categorization (personal preferences, household info, etc.)
    * Automatic memory backups
    * Conflict resolution for contradictory information
    * User notifications for memory updates
    * Memory retrieval optimization
    * Memory size management
    * Error handling

    ### Requirements:
    * snarky-snark's variable component from HACS
    * notify service (optional, for notifications)

    ### Usage:
    * Give the script a clear description for the LLM to understand.
    * The description should indicate it handles remembering and forgetting information.
    * **Make sure to expose the script to Assist after saving.**

    ### Example script description:
    `Update assistant's memory system. Handles remembering new information, forgetting details, 
    and organizing memories by category.`
    "
  domain: script
  homeassistant:
    min_version: 2025.1.0
  input:
    memory_entity:
      name: Primary Memory Storage Entity
      description: >
        Select the var entity used as the primary storage for voice assistant memory.
        (For example: var.voice_assistant_memory)
      selector:
        entity:
          domain: var
    backup_memory_entity:
      name: Backup Memory Storage Entity (Optional)
      description: >
        Select an optional secondary var entity to store memory backups.
        Leave empty to disable automatic backups.
      default: ""
      selector:
        entity:
          domain: var
          multiple: false
    notify_service:
      name: Notification Service (Optional)
      description: >
        Select a notification service to receive updates about memory changes.
        Leave empty to disable notifications.
      default: ""
      selector:
        service:
          domain: notify
    memory_size_limit:
      name: Memory Size Limit (KB)
      description: >
        Set a maximum size limit for the memory storage in kilobytes.
        The system will optimize memory if this limit is reached.
        Set to 0 for no limit.
      default: 100
      selector:
        number:
          min: 0
          max: 1000
          unit_of_measurement: KB
    prompt_settings:
      name: Memory Processing Settings
      icon: mdi:brain
      description: >
        Configure how memory updates are processed and structured.
      collapsed: true
      input:
        memory_prompt:
          name: Memory Processing Prompt
          description: >
            Instructions for the LLM to process and update memory data.
          selector:
            text:
              multiline: true
              multiple: false
          default: >
            # Memory Management Instructions

            You are managing a structured memory system for a voice assistant. 
            Follow these guidelines precisely:

            ## General Rules
            1. This argument is mandatory - always provide the COMPLETE memory content.
            2. Never return just the new memory - always merge with existing data.
            3. If asked to forget information, process the request by removing that specific data while preserving everything else.
            4. Keep memories concise while preserving all important details.
            5. Use markdown formatting with proper headings and structure.

            ## Memory Structure
            Organize memories into these categories:
            - **Personal Preferences**: User likes, dislikes, preferences
            - **Household Information**: Home details, routines, locations of items
            - **Important Dates**: Birthdays, anniversaries, appointments
            - **Tasks & Reminders**: Things to remember or follow up on
            - **Custom Categories**: Create new categories as needed

            ## Conflict Resolution
            When new information contradicts existing data:
            1. Assume newer information supersedes older information
            2. Note the change and date in the memory structure
            3. Remove the contradicted information completely

            ## Formatting Requirements
            - Use clear category headings (## Category Name)
            - Use bullet points for individual memories
            - Include a timestamp for each new memory item
            - Keep formatting consistent throughout

            Always return the complete, updated memory structure.
mode: parallel
max_exceeded: silent
fields:
  memory_update:
    name: Memory Update
    description: !input memory_prompt
    selector:
      text:
        multiline: true
    required: true
  memory_category:
    name: Memory Category (Optional)
    description: >
      Optionally specify a category for this memory update.
      Leave empty to let the LLM determine the appropriate category.
    selector:
      text:
        multiline: false
    required: false
sequence:
  - variables:
      version: 20250321
      memory_entity: !input memory_entity
      backup_entity: !input backup_memory_entity
      notify_service: !input notify_service
      memory_size_limit: !input memory_size_limit
      memory_category: "{{ memory_category }}"
      # Read existing memory (with error handling)
      current_memory: >
        {% if states(memory_entity) != 'unavailable' and states(memory_entity) != 'unknown' %}
          {{ state_attr(memory_entity, 'full_memory') | default('') }}
        {% else %}
          {{ '' }}
        {% endif %}
      updated_memory: "{{ memory_update }}"
      timestamp: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
  
  # Create backup if backup entity is specified
  - if:
      - condition: template
        value_template: "{{ backup_entity != '' }}"
    then:
      - service: var.set
        data:
          entity_id: "{{ backup_entity }}"
          value: "Backup created at {{ timestamp }}"
          attributes:
            full_memory: "{{ current_memory }}"
            backup_timestamp: "{{ timestamp }}"
  
  # Check memory size and optimize if needed
  - variables:
      memory_size_kb: "{{ (updated_memory | length / 1024) | round(2) }}"
  
  - if:
      - condition: template
        value_template: >
          {{ memory_size_limit > 0 and memory_size_kb > memory_size_limit }}
    then:
      - service: system_log.write
        data:
          message: >
            "Memory size ({{ memory_size_kb }}KB) exceeds limit ({{ memory_size_limit }}KB).
            Requesting the LLM to optimize memory size."
          level: warning
      # Here we could add a secondary LLM call to optimize/compress memory
      # For now we'll just log the warning
  
  # Update primary memory storage
  - service: var.set
    data:
      entity_id: "{{ memory_entity }}"
      value: "Updated at {{ timestamp }}"
      attributes:
        full_memory: "{{ updated_memory }}"
        last_category_updated: "{{ memory_category }}"
        last_update_timestamp: "{{ timestamp }}"
        memory_size_kb: "{{ memory_size_kb }}"
  
  # Verify memory update was successful
  - variables:
      verification_check: >
        {% if state_attr(memory_entity, 'full_memory') == updated_memory %}
          {{ true }}
        {% else %}
          {{ false }}
        {% endif %}
  
  # Send notification if enabled and verification check passes
  - if:
      - condition: and
        conditions:
          - condition: template
            value_template: "{{ notify_service != '' }}"
          - condition: template
            value_template: "{{ verification_check }}"
    then:
      - service: "{{ notify_service }}"
        data:
          message: >
            "Memory successfully updated at {{ timestamp }}.
            {% if memory_category %}Category: {{ memory_category }}.{% endif %}
            Memory size: {{ memory_size_kb }}KB."
  
  # Log error if verification failed
  - if:
      - condition: template
        value_template: "{{ not verification_check }}"
    then:
      - service: system_log.write
        data:
          message: "ERROR: Memory update verification failed. Memory may not have been saved correctly."
          level: error
      # Optionally notify user of failure
      - if:
          - condition: template
            value_template: "{{ notify_service != '' }}"
        then:
          - service: "{{ notify_service }}"
            data:
              message: "WARNING: Voice assistant memory update failed. Please try again."
              title: "Memory Update Error"
  
  - stop: >
      {% if verification_check %}
        "Memory updated successfully. Size: {{ memory_size_kb }}KB"
      {% else %}
        "Memory update failed. Please check system logs."
      {% endif %}
